import genToken from "../config/token.js";
import User from "../models/user.model.js"
import bcrypt from "bcryptjs"
export const signUp = async (req, res) => {
    try{
        const {name, email, password} = req.body

        const existEmail = await User.findOne({email});

        if(existEmail){
            return res.status(400).json({message : "email already exists!"});
        }

        if(password.length < 6){
            return res.status(400).json({message : "password must be at least 6 characters"});
        }

        // paswwords arent directly stored in our db first they are hashed
        // higher the salt number stronger the hashed password
        const hashedPassword = await bcrypt.hash(password, 10);

        const user = await User.create({
            name, password : hashedPassword, email
        })

        // any model in mongoDB also has a _id (auto-generated by mongoDB)
        // to generate token we write a token.js
        const token = await genToken(user._id);

        // after creation of user we will generate a token using userID
        // the token is stored in our cookies
        // whenever we visit this website we will not be required to sign in again
        // because userID is withdrawn from token present in cookies

        // to parse token into cookie 
        // creates a cookie named token and stores the value of variable token in it
        res.cookie("token", token, {
            // done so that cookie cannot be accessed via javascript
            // even if someone injects malicious javascript they cant steal the cookie
            httpOnly : true,
            // life time of the cookie, after 7 days it will get automatically deleted by browser
            maxAge : 7*24*60*60*1000,
            // browser sends this cookie to the same domain that set the cookie (no other domain)
            sameSite: "strict",
            // done during local development
            secure: false
        })

        return res.status(201).json(user);

    }catch(error){
        return res.status(500).json({message : `signup error ${error}`})
    }
}
export const Login = async (req, res) => {
    try{
        const {email, password} = req.body

        const user = await User.findOne({email});

        if(!user){
            return res.status(400).json({message : "email does not exist!"});
        }

        // bcrypt hashes the password typed out during login and comapres to user.password (which was stored as hashedPassword)
        const isMatch = await bcrypt.compare(password, user.password);

        // if the passwords dont match then incorrect password returned
        if(!isMatch){
            return res.status(400).json({message : "incorrect password"});
        }

        
        
        const token = await genToken(user._id);

        
        res.cookie("token", token, {
            // done so that cookie cannot be accessed via javascript
            // even if someone injects malicious javascript they cant steal the cookie
            httpOnly : true,
            // life time of the cookie, after 7 days it will get automatically deleted by browser
            maxAge : 7*24*60*60*1000,
            // browser sends this cookie to the same domain that set the cookie (no other domain)
            sameSite: "strict",
            // done during local development
            secure: false
        })

        return res.status(201).json(user);

    }catch(error){
        return res.status(500).json({message : `login error ${error}`})
    }
}

// after user logOuts we need to delete the token of the user from the cookies
export const logOut = async (req, res) => {
    try{
        res.clearCookie("token");
        res.status(200).json({message : "logged out successfully"});
    }catch(error){
        return res.status(500).json({message : `logout error ${error}`})
    }
}